#!/usr/bin/env python3
import argparse, re, os, sys, datetime, psutil, textwrap, configparser
"""
Program to find the top disk hogs in a directory tree. 
Usage: prog args [path]
args:
		--count number of directories to display (may be less if there arent that many)
		--ignore file with list of regular expressions (or plain text) of paths to ignore
		--quiet prevents scanning status messages. Usefull for reports.
		--mounted scan mounted filesystems. Default is no.

Copyright (C) 2020 Nicole Stevens. Code may be freely used. Please keep my copyright intact. 

For license see LICENSE. 

"""

def parseline(s,**kwargs):
	l = ''
	for key,val in kwargs.items():
		key = '%'+key
		s = s.replace(key,str(val))

	return s

def header(s, output, underline=False, underchar='=',**kwargs):
	hl = ''
	s = parseline(s,**kwargs)

	if(underline):
		for l in s.split(' '):
			hl = hl + ' '.rjust(len(l)+1,underchar)
	print('      {}\n      {}\n'.format(s,hl), file=output)

def find_sdiskpart(path):
    path = os.path.abspath(path)
    while not os.path.ismount(path):
        path = os.path.dirname(path)
    p = [p for p in psutil.disk_partitions(all=True) if p.mountpoint == path.__str__()]
    l = len(p)
    if len(p) == 1:
        return p[0]
    raise psutil.Error

def getmount(path):        
    path = os.path.realpath(os.path.abspath(path))
    while path != os.path.sep:
        if os.path.ismount(path):
            return path
        path = os.path.abspath(os.path.join(path, os.pardir))
    return path

def format_bytes(size):
	"""
	Format number in human readable format.
	"""
	# 2**10 = 1024
	power = 2**10
	n = 0
	power_labels = {0 : '', 1: 'k', 2: 'M', 3: 'G', 4: 'T'}
	while size > power:
		size /= power
		n += 1
	return '{:.1f}{}'.format(size,power_labels[n]+'b')

def getdirsz(path):
	"""
	Return the apparent size of a directory testing all files for size. 
	"""
	tot = 0
	fc = 0
	for (path, dirs, files) in os.walk(path):
		for file in files:
			try:
				filename = os.path.join(path, file)
				tot += os.path.getsize(filename)
				fc = fc + 1
			except:
				pass
	return tot, fc

def scanner(sdir,quiet,ignore, mounted):
	"""
	Return a list of tuples with size and path. 
	if quiet is true no status messages are displayed.
	if ignorelist is specified, treat as regex of paths to ignore
	"""
	if ignore:
		if not os.path.isabs(ignore):
			ignorefile = os.path.join(sdir,ignore)
		else:
			ignorefile = ignore
		try:
			if os.path.exists(ignorefile):
				with open(ignorefile) as f:
					ignorelist = f.readlines()
				ignorelist = [x.strip() for x in ignorelist]
				ignorelist = '(?:% s)' % '|'.join(ignorelist)
			else:
				ignorelist = False
		except Exception as e:
			if os.path.basename(ignore) == ".spacehog.ignore":
				pass
			else:
				print('Warning: Cannot open ignore list {}'.format(e), file=sys.stderr)

	dirsz = []
	fcount = 0
	try:
		for f in os.listdir(sdir):
			d = os.path.join(sdir,f)
			if os.path.isdir(d):
				if ignorelist:
					if re.match(ignorelist,os.path.basename(d)):
						continue
				if not mounted:
					if os.path.ismount(d):
						continue
				if not quiet:
					sys.stdout.write("\rScanning {}\033[K\r".format(d))
				sz, fc = getdirsz(d)
				dirsz.append((sz, f, fc))
				fcount = fcount + fc
	except Exception as e:
		if hasattr(e, 'message'):
			print('Cannot scan {}: {}'.format(ignore,e.message), file=sys.stderr)
		else:
			print('Cannot scan {}'.format(e), file=sys.stderr)
		sys.exit(1)

	if not quiet:
		sys.stdout.write('\r\033[K');
	return dirsz;

try:
	parser = argparse.ArgumentParser();
	parser.description = "Spacehog - show top disk space hogs"
	parser.add_argument('--config',type=str,help="Conmfiguation file. Default is spacehog.ini in cwd", metavar='filename',default='spacehog.ini')
	parser.add_argument('--count',type=int,help="Show top n directories, default is 10", metavar='number')
	parser.add_argument('--ignore',type=str,help='file name containing list of directories to ignore. Default is .spacehog.ignore if it exists',metavar='filename')
	parser.add_argument('--mounted',help='Traverse mounted filesystems',action='store_true')
	parser.add_argument('--output',type=str,help='Output file name, implies --quiet',metavar="filename")
	parser.add_argument('--quiet',help="Quiet mode, don't show scanning status",action='store_true')
	parser.add_argument('--showfs',help="Show info about filesystem(s) involved",action='store_true',default=False)
	parser.add_argument('path', nargs='*', type=str,help="Path to scan",metavar="dir ...")
	args = parser.parse_args();

	dirlist = []

	if args.path and len(args.path):
		if type(args.path) is str:
			args.path = [args.path]
		for d in args.path:
			dirlist.append(os.path.abspath(os.path.expanduser(d)))
	else:
		dirlist = [os.getcwd()]

	if args.count:
		count = args.count
	else:
		count = 10

	if args.quiet:
		quiet = True
	else:
		quiet = False

	if args.ignore:
		if args.ignore.lower() == 'none':
			ignore = ""
		else:
			ignore = args.ignore
	else:
		ignore = ".spacehog.ignore"

	if args.mounted:
		mounted = True
	else:
		mounted = False

	if args.output:
		try:
			output = open(args.output,'w')
			quiet = True
		except Exception as e:
			print('Cannot open output file {}'.format(e),file=sys.stdout)
			sys.exit(1)
	else:
		output = sys.stdout

	if not os.path.isabs(args.config):
		args.config = os.path.join(os.path.dirname(os.path.realpath(os.path.abspath(sys.argv[0]))),args.config)
	if not os.path.exists(args.config):
		print('Cannot find config file, {}'.format(args.config), file=sys.stderr)
		sys.exit(1)
	cfg = configparser.RawConfigParser()
	cfg.read(args.config);
	cfg = cfg['output']
	underchar = cfg['underchar']

	dirsz = []

	for d in dirlist:
		dirsz = dirsz + scanner(d,quiet,ignore, mounted)

	if len(dirsz) < 1:
		print('No directories found in {}'.format(basedir), file=sys.stderr)
		sys.exit(1)

	dirsz = sorted(dirsz,key=lambda item: item[0],reverse=True)[:count]
	width = max(len(format_bytes(item[0])) for item in dirsz)
	dwidth = max(len(item[1]) for item in dirsz)
	total = 0
	dc = len(dirsz)
	fcount = 0
	dlist = ','.join(dirlist)
	if output != sys.stdout:
		d = datetime.datetime.now()
		d = d.strftime(cfg['dateformat'])
		print('      {}'.format(parseline(cfg['datetime'],datetime=d)),file=output)
	header(cfg['title'],output,True,underchar,count=dc,dirlist=dlist) # Top 10 space hogging...
	pheader = cfg['header'].split(' ')
	print('      {} {}'.format(pheader[0].rjust(width), pheader[1]),file=output)
	print('      {} {}'.format(underchar.rjust(width,underchar), underchar.ljust(dwidth,underchar)),file=output)
	for sz,path,fc in dirsz:
		fcount = fcount + fc
		total = total + sz
		sz = format_bytes(sz)
		print('      {} {}'.format(sz.rjust(width),path), file=output)

	total = format_bytes(total)
	print('      \n\t{}\n'.format(parseline(cfg['footer'],total=total,dircount=dc,filecount=fc)),file=output)

	if(args.showfs):
		header(cfg['fsheader'],output,True, underchar)
		fs = {}
		for d in dirlist:
			m = getmount(d)
			if not m in fs:
				fs[m] = [d]
			else:
				fs[m].append(d)
		fsi = {}
		for f in fs:
			st = os.statvfs(f)
			size = (st.f_frsize*st.f_blocks)
			free = (st.f_frsize*st.f_bfree)
			fsi[f] = [size,free]
		for f in fs:
			tot,free = fsi[f]
			perc = int(100 * float(free)/float(tot))
			tot = format_bytes(tot)
			free = format_bytes(free)
			dirs = '\n\t\t\t'.join(fs[f])
			p = fsi[f]
			p = find_sdiskpart(f)
			p = p.device
			print('      \t{}:\t{} bytes total, {} bytes free ({}% free)\n\t\tdir(s): {}'.format(p,tot,free,perc,dirs),file=output)

except KeyboardInterrupt:
	print('\n\nInterrupted',file=sys.stderr)
	sys.exit(1)